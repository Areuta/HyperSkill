@startuml

title __MAZE's Class Diagram__\n

  namespace maze {
    class maze.DaoMaze {
        {static} - maze : Maze
        {static} + getMaze()
        {static} + loadMaze()
        {static} + saveMaze()
        {static} + setMaze()
        {static} ~ loadMazeFromFile()
        {static} ~ saveMazeToFile()
        {static} - checkEnters()
        {static} - checkSize()
        {static} - checkSymbolsOk()
        {static} - generateNodes()
        {static} - getAttrMaze()
        {static} - lineOk()
    }
  }
  

  namespace maze {
    class maze.DaoMaze.SavedMazeException {
        + SavedMazeException()
    }
  }
  

  namespace maze {
    abstract class maze.Gridable {
        {static} + PASS : String
        {static} + WALL : String
        ~ column : int
        ~ displayString : String
        ~ row : int
        + getColumn()
        + getDisplayString()
        + getRow()
        + setDisplayString()
    }
  }
  

  namespace maze {
    class maze.Main {
        {static} + main()
    }
  }
  

  namespace maze {
    class maze.Maze {
        ~ cells : Gridable[][]
        ~ height : int
        ~ leftToRight : boolean
        ~ mazeEdges : HashSet<MazeEdge>
        ~ mazeNodes : HashSet<MazeNode>
        ~ width : int
        {static} - serialVersionUID : long
        + Maze()
        + findEscape()
        + getCells()
        + getHeight()
        + getSpanningTree()
        + getWidth()
        + isLeftToRight()
        + printMaze()
        + toString()
    }
  }
  

  namespace maze {
    class maze.MazeEdge {
        - weight : int
        + MazeEdge()
        + equals()
        + getNode1()
        + getNode2()
        + getWeight()
        + hashCode()
    }
  }
  

  namespace maze {
    class maze.MazeNode {
        - neighbours : Map<MazeNode, MazeEdge>
        + MazeNode()
        + addNeighbours()
        + getNeighbours()
        + setNeighbours()
        - defineNeighbours()
    }
  }
  

  namespace maze {
    abstract class maze.Menu {
        {static} ~ badInput : String
        ~ isExit : boolean
        {static} ~ maze : Maze
        {static} ~ scanner : Scanner
        ~ generateNewMaze()
        ~ initialize()
        ~ loadMazeFromFile()
        {abstract} ~ menuProcess()
        {abstract} ~ menuShow()
    }
  }
  

  namespace maze {
    class maze.MenuExt {
        ~ menuProcess()
        ~ menuShow()
        - saveMazeToFile()
    }
  }
  

  namespace maze {
    class maze.RandomMaze {
        + RandomMaze()
        + getSpanningTree()
        - generateInlets()
        - generateMazeNodes()
    }
  }
  

  namespace maze {
    class maze.SimpleMenu {
        ~ menuProcess()
        ~ menuShow()
    }
  }
  

  maze.DaoMaze +-down- maze.DaoMaze.SavedMazeException
  maze.Gridable o-- maze.Maze : maze
  maze.Maze .up.|> java.io.Serializable
  maze.Maze o-- maze.MazeNode : goal
  maze.Maze o-- maze.MazeNode : start
  maze.MazeEdge -up-|> maze.Gridable
  maze.MazeEdge o-- maze.MazeNode : node1
  maze.MazeEdge o-- maze.MazeNode : node2
  maze.MazeNode -up-|> maze.Gridable
  maze.MenuExt -up-|> maze.Menu
  maze.RandomMaze -up-|> maze.Maze
  maze.SimpleMenu -up-|> maze.Menu


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
